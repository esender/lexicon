import Head from "next/head";
import Image from "next/image";
import { Button, ButtonGroup, Heading, Box } from "@chakra-ui/react";
import useSWR from "swr";
import React, { useCallback, useState } from "react";
import words from "../../public/words/index.json";
import shuffle from "lodash/shuffle";
import sample from "lodash/sample";
import Link from "../../components/Link";
import ExerciseCard from "../../components/ExerciseCard";

function getRandom(arr: any[]) {
  return arr[Math.floor(Math.random() * arr.length)];
}

// @ts-ignore
const fetcher = (...args) => fetch(...args).then((res) => res.json());
const verbs = [
  {
    verb: "finden",
    stem: "find",
    forms: ["finde", "findest", "findet", "finden", "findet", "finden"],
  },
];

type ConjugationTrainerProps = {
  word: string;
};

type useWordResult = {
  error: any;
  isLoading: boolean;
  word: {
    infinitive: string;
    conjugations: {
      s1: string;
      s2: string;
      s3: string;
      p1: string;
      p2: string;
      p3: string;
    };
    stem: string;
    isRegular: boolean;
  };
};

function useWord(word: string): useWordResult {
  const { data, error } = useSWR(() => {
    return `/words/${word}.json`;
  }, fetcher);

  return {
    error,
    isLoading: !error && !data,
    word: data,
  };
}

type SelectButtonProps = {
  endings: string[];
  correct: string;
  stem: string;
};

function SelectButton({ endings, correct, stem }: SelectButtonProps) {
  const [valid, setValid] = useState<"valid" | "invalid">();
  const handleCheck = (e: React.SyntheticEvent<HTMLButtonElement>) => {
    let end = e.target.textContent.substr(1);

    setValid(correct === stem + end ? "valid" : "invalid");
  };
  return (
    <ButtonGroup isAttached>
      {valid}
      {endings.map((end) => (
        <Button key={end} onClick={handleCheck}>
          {end}
        </Button>
      ))}
    </ButtonGroup>
  );
}

const pronouns = {
  s1: ["ich"],
  s2: ["du"],
  s3: ["er", "sie(she)", "es"],
  p1: ["wir"],
  p2: ["ihr"],
  p3: ["sie(they)", "Sie"],
};

type ConjugationProps = {
  type: "s1" | "s2" | "s3" | "p1" | "p2" | "p3";
  correct: string;
  stem: string;
};

const availableEndings = ["en", "st", "t", "e", "et", "est"] as const;

const getExtraEndings = function (ending: string): string[] {
  const endings = [ending];

  while (endings.length < 3) {
    const end = sample(availableEndings);
    if (end && !endings.includes(end)) {
      endings.push(end);
    }
  }

  console.log(endings);

  return endings;
};

function Conjugation({ type, correct, stem }: ConjugationProps) {
  let correctEnding = correct.substr(stem.length);
  return (
    <Box mb={1}>
      {sample(pronouns[type])} {stem}__
      <SelectButton
        correct={correct}
        stem={stem}
        endings={shuffle(getExtraEndings(correctEnding).map((c) => `-${c}`))}
      />
    </Box>
  );
}

function ConjugationTrainer({ word }: ConjugationTrainerProps) {
  const { error, isLoading, word: wordInfo } = useWord(word);

  if (error) return <div>failed to load</div>;
  if (isLoading) return <div>loading...</div>;

  console.log(wordInfo);

  return (
    <Box textAlign="center">
      <Heading>{wordInfo.infinitive}</Heading>
      <br />
      <br />
      {(
        Object.entries(wordInfo.conjugations) as [
          keyof useWordResult["word"]["conjugations"],
          string
        ][]
      ).map(([key, value]) => {
        return (
          <Conjugation
            key={key + word}
            type={key}
            correct={value}
            stem={wordInfo.stem}
          />
        );
      })}
    </Box>
  );
}

type SomSom = {
  infinitive: string;
};

type Word = {
  infinitive: string;
  isRegular: boolean;
};

type TrainerProps = {
  words: Word[];
};
const Trainer: React.FC<TrainerProps> = function ({ words }) {
  const filteredWords = words.filter((word) => word.isRegular);
  const [verb, setVerb] = React.useState<SomSom>(getRandom(filteredWords));

  const resetVerb = useCallback(
    () => setVerb(getRandom(filteredWords)),
    [filteredWords]
  );

  return (
    <div>
      <Head>
        <title>Conjugation Trainer</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <ExerciseCard
        title="Conjugator"
        href="/exercises/conjugator"
        description="Present tense conjugation practice for regular verbs."
      />
    </div>
  );
};

export default Trainer;

export async function getStaticProps() {
  return {
    props: {
      words,
    },
  };
}
