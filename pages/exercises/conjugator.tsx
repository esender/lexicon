import Head from "next/head";
import {
  Button,
  ButtonGroup,
  Heading,
  Box,
  Flex,
  Stack,
  Skeleton,
} from "@chakra-ui/react";
import React, { useCallback, useMemo, useState } from "react";
import verbs from "../../constants/verbs";
import shuffle from "lodash/shuffle";
import sample from "lodash/sample";
import { sampleSize } from "lodash";
import useVerb from "../../hooks/queries/useVerb";

function getRandom(arr: any[]) {
  return arr[Math.floor(Math.random() * arr.length)];
}

type ConjugationTrainerProps = {
  word: string;
};

const PRONOUNS = {
  s1: ["ich"],
  s2: ["du"],
  s3: ["er", "sie(she)", "es"],
  p1: ["wir"],
  p2: ["ihr"],
  p3: ["sie(they)", "Sie"],
};

type ConjugationProps = {
  type: "s1" | "s2" | "s3" | "p1" | "p2" | "p3";
  correct: string;
  stem: string;
};

const availableEndings = ["en", "st", "t", "e", "et", "est"] as const;

const getExtraEndings = function (ending: string): string[] {
  const endings = sampleSize<string>(availableEndings, 3);

  if (!endings.includes(ending)) {
    endings[0] = ending;
  }

  return endings;
};

function Conjugation({ type, correct, stem }: ConjugationProps) {
  let correctEnding = correct.substr(stem.length);
  let endings = useMemo(
    () => shuffle(getExtraEndings(correctEnding)),
    [correctEnding]
  );
  let pronoun = useMemo(() => sample(PRONOUNS[type]), [type]);

  let [answer, setAnswer] = useState<string>();

  let getColorScheme = function (current: string) {
    if (!answer) return "gray";

    if (correct === current) return "green";

    if (answer === current) return "red";

    return "gray";
  };

  return (
    <Flex w="full" justifyContent="space-between">
      <Box>{pronoun}</Box>
      <Box>
        <ButtonGroup>
          {endings.map((end) => (
            <Button
              key={end}
              size="sm"
              variant="outline"
              colorScheme={getColorScheme(stem + end)}
              minW="14"
              onClick={() => {
                setAnswer(stem + end);
              }}
            >
              {stem + end}
            </Button>
          ))}
        </ButtonGroup>
      </Box>
    </Flex>
  );
}

type conjs = "s1" | "s2" | "s3" | "p1" | "p2" | "p3";

function ConjugationTrainer({ word }: ConjugationTrainerProps) {
  const { isError, isSuccess, data: wordInfo } = useVerb(word);

  if (isError) return <div>failed to load</div>;

  return (
    <Box textAlign="center">
      <Box mb={2}>
        <Skeleton isLoaded={isSuccess} display="inline-block" minW={200}>
          <Heading>{wordInfo?.infinitive ?? "something"}</Heading>
        </Skeleton>
      </Box>
      <Skeleton isLoaded={isSuccess} display="inline-block" minW={200}>
        <Heading as="h3" size="md">
          {wordInfo?.translation ?? "something"}
        </Heading>
      </Skeleton>
      <br />
      <br />
      <Box maxW="500" m={"auto"}>
        <Stack direction="column">
          {isSuccess
            ? (Object.entries(wordInfo.conjugations) as [conjs, string][]).map(
                ([key, value]) => {
                  return (
                    <Conjugation
                      key={key + word}
                      type={key}
                      correct={value}
                      stem={wordInfo.stem}
                    />
                  );
                }
              )
            : [0, 0, 0, 0, 0, 0].map((_, index) => (
                <Skeleton key={index} height={8}></Skeleton>
              ))}
        </Stack>
      </Box>
    </Box>
  );
}

type Verb = {
  infinitive: string;
  isRegular: boolean;
};

type TrainerProps = {
  verbs: Verb[];
};
const Trainer: React.FC<TrainerProps> = function ({ verbs }) {
  const filteredWords = verbs.filter((word) => word.isRegular);
  const [verb, setVerb] = React.useState<Verb>(getRandom(filteredWords));

  const resetVerb = useCallback(
    () => setVerb(getRandom(filteredWords)),
    [filteredWords]
  );

  return (
    <div>
      <Head>
        <title>Conjugation Trainer</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Heading>Present Tense Regular Verbs Conjugation</Heading>

      <button onClick={resetVerb}>Reset Word</button>

      {verb && <ConjugationTrainer word={verb.infinitive} />}
    </div>
  );
};

export default Trainer;

export async function getStaticProps() {
  return {
    props: {
      verbs,
    },
  };
}
